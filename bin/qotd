#!/usr/bin/env python2
import json
import sys
import urllib
import urllib2

baseUrl = "http://yoplitein.net/qotd/json"
qotdUrl = baseUrl + "/qotd/"
idsUrl = baseUrl + "/quote/{}"
latestUrl = baseUrl + "/latest/"
randomUrl = baseUrl + "/random/"
searchUrl = baseUrl + "/search/{}"

def error(msg):
    print >>sys.stderr, "Error:", msg
    
    raise SystemExit

def get(url):
    request = urllib2.Request(url)
    
    try:
        opened = urllib2.urlopen(request)
        
        return opened.read()
    except urllib2.HTTPError as err:
        data = err.read()
        data = json.loads(data)
        
        error("HTTP {} ({})".format(err.code, data["message"]))

def parse(data):
    parsed = json.loads(data)
    result = None
    
    def format(quote):
        return "{}. {}".format(quote["id"], quote["quote"])
    
    if type(parsed) == dict:
        result = format(parsed)
    elif type(parsed) == list:
        result = "\n".join(map(lambda q: format(q), parsed))
    else:
        error("Invalid response")
    
    return result

def fetch(url):
    return parse(get(url))

def main():
    args = sys.argv[1:]
    
    if len(args) == 0:
        print fetch(qotdUrl)
        
        return
    
    cmd = args[0]
    
    if cmd == "latest":
        print fetch(latestUrl)
    elif cmd == "random":
        print fetch(randomUrl)
    elif cmd == "search":
        if len(args) == 0:
            print "Search for what?"
            
            return
        
        args = " ".join(args[1:])
        encoded = urllib.urlencode({"q": args})[2:]
        encoded = encoded.replace("+", " ")
        url = searchUrl.format(encoded)
        
        print fetch(url)
    else:
        for index, arg in enumerate(args):
            try:
                int(arg)
            except ValueError as err:
                if index == 0:
                    print "Don't know how to", cmd
                    
                    return
                else:
                    error(str(err))
        
        print fetch(idsUrl.format(",".join(args)))

if __name__ == '__main__':
    main()


#!/usr/bin/env python2
"""
Similar to bash's pushd/popd, using a list instead of a stack.

Environment manipulation cannot be done directly,
so some shell support is needed:

    function dirman() { eval $(/full/path/to/dirman $@); }
"""

import sys
import os

dirs = output = None
changeDirs = False
dirIndex = 0

#helpers
def echo(*args, **kwargs):
    global output
    
    if kwargs.get("error", False):
        output = "false"
    
    try:
        args = args[0] % args[1:]
    except TypeError:
        pass
    
    if type(args) != str:
        args = " ".join([str(x) for x in args])
    
    sys.stderr.write(args + "\n")

def remove_blanks(list):
    while None in list:
        list.remove(None)
    
    while "" in list:
        list.remove("")
    
    return list

def expand_path(path):
    return os.path.abspath(os.path.expanduser(path))

def get_dirs():
    return [expand_path(x) for x in remove_blanks(os.environ.get("DIRS", "").split(";"))]

def NaN_error(offender):
    echo("%r is not a number", offender, error=True)

def range_error(offender):
    if type(offender) != int:
        offender = int(offender)
    
    echo("%d is out of range", offender, error=True)

def add_path(args):
    dirName = expand_path(args[0])
    
    if dirName in dirs:
        echo("%s already in list (%d)", dirName, dirs.index(dirName))
        
        return False
    
    if not os.path.exists(dirName):
        echo("%s does not exist", dirName)
        
        return False
    
    try:
        index = int(args[1])
    except IndexError:
        index = len(dirs)
    except ValueError:
        NaN_error(args[1])
        
        return False
    
    dirs.insert(index, dirName)
    
    return True

#commands
def handle_list(args):
    """ls - print directories in list"""
    
    try:
        index = args[0]
        
        echo("%d: %s", index, dirs[index])
    except IndexError:
        for dir, index in zip(dirs, range(len(dirs))):
            echo("%d: %s", index, dir)

def handle_current_dir(args):
    """pwd (aka cd) - print current position in list"""
    
    try:
        index = dirs.index(os.getcwd())
        name = dirs[index]
    except ValueError:
        index = -1
        name = "not in any known directory"
    
    echo("%d: %s", index, name)

def handle_switch(args, step=1):
    """n[ext]|p[rev] - move through the list"""
    
    global dirIndex, changeDirs
    
    if len(dirs) == 0:
        return echo("No directories in list", error=True)
    
    dirIndex = (dirIndex+step) % len(dirs)
    changeDirs = True

def handle_move(args):
    """mv <from> <to> - reposition a directory in the list"""
    
    try:
        target = int(args[0])
    except ValueError:
        return NaN_error(args[0])
    
    try:
        destination = int(args[1])
    except ValueError:
        return NaN_error(args[1])
    
    if destination < 0: #make -1 work as expected
        destination = len(dirs)-abs(destination+1)
    
    try:
        dir = dirs.pop(target)
        
        dirs.insert(int(destination), dir)
    except IndexError:
        range_error(target)

def handle_add(args):
    """a[dd] [path] [index] - add specified directory (defaults to current dir) to the list"""
    
    if len(args) == 0:
        args = ["."]
    
    add_path(args)

def handle_remove(args):
    """rm <index> - remove a directory from the list"""
    
    try:
        dirs.pop(int(args[0]))
    except ValueError:
        NaN_error(args[0])
    except IndexError:
        range_error(args[0])

def handle_push(args):
    """pu[sh] <path> - adds a directory to the list and switches to it"""
    
    global dirIndex, changeDirs
    
    if add_path([args[0]]):
        dirIndex = len(dirs)-1
        changeDirs = True

def handle_clear(args):
    """c[lear] - removes all directories from the list"""
    
    for x in range(len(dirs)):
        dirs.pop(0)

def handle_help(args):
    spaces = " "*8
    help = """dirman <command|id> - better working directory management\n"""
    help += "    <id> - switch to specified directory in list\n"
    help += "    Commands:\n"
    help += spaces + handle_add.__doc__ + "\n"
    help += spaces + handle_push.__doc__ + "\n"
    help += spaces + handle_remove.__doc__ + "\n"
    help += spaces + handle_clear.__doc__ + "\n"
    help += spaces + handle_move.__doc__ + "\n"
    help += spaces + handle_switch.__doc__ + "\n"
    help += spaces + handle_list.__doc__ + "\n"
    help += spaces + handle_current_dir.__doc__ + "\n"
    
    echo(help)

def main(cmd, args):
    global dirs, dirIndex, output, changeDirs
    
    dirs = get_dirs()
    dirIndex = int(os.environ.get("DIRINDEX", "0"))
    handlerArgs = (args,)
    
    if   cmd in ["ls"]:
        handler = handle_list
        output = "true"
    elif cmd in ["pwd", "cd"]:
        handler = handle_current_dir
        output = "true"
    elif cmd in ["next", "n"]:
        handler = handle_switch
    elif cmd in ["prev", "p"]:
        handler = handle_switch
        handlerArgs += (-1,)
    elif cmd in ["move", "mv"]:
        handler = handle_move
    elif cmd in ["add", "a"]:
        handler = handle_add
    elif cmd in ["rm"]:
        handler = handle_remove
    elif cmd in ["pu", "push"]:
        handler = handle_push
    elif cmd in ["c", "clear"]:
        handler = handle_clear
    elif cmd in ["dirman", "help", "-h", "--help"]:
        handler = handle_help
        output = "true"
    else:
        try: #switch dirs by index
            handler = lambda args: None
            dirIndex = int(cmd)
            changeDirs = True
        except ValueError:
            handler = lambda args: echo("Unknown command:", cmd)
            
            output = "false"
    
    try:
        handler(*handlerArgs)
        
        if not output:
            output = ("""export DIRS="%s";\n""" % (";".join(dirs),) +
                      "export DIRINDEX=%d;\n" % (dirIndex,))
        
        if changeDirs:
            output += "cd %s;\n" % (dirs[dirIndex],)
    except IndexError: #invalid number of arguments
        echo(handler.__doc__)
        
        return
    
    print output

if __name__ == "__main__":
    name = "dirman"
    
    if(len(sys.argv) > 1):
        name = sys.argv[1]
    
    main(name, sys.argv[2:])
